name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      home:
        description: 'location'
        required: false
        default: 'The Octoverse'

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15
        
    - name: Set up terragrunt
      run: wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v0.27.3/terragrunt_linux_amd64 && chmod +x ./terragrunt_linux_amd64 

    - name: Install dependencies
      run: go get ./...
      working-directory: jobs_scaper
    
    - name: Build
      run: go build -v ./entrypoints/lambda/main.go
      working-directory: jobs_scaper

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
    
    - name: Terragrunt init
      id: terragrunt_init
      run: ./terragrunt_linux_amd64 init -input=false
      working-directory: infrastructure
      
    - name: Terragrunt validate
      id: terragrunt_validate
      run: ./terragrunt_linux_amd64 validate
      working-directory: infrastructure

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: infrastructure

    - name: Terragrunt Plan
      id: plan
      run: ./terragrunt_linux_amd64 plan -no-color -input=false
      working-directory: infrastructure
      
    - name: Terragrunt Apply
      id: apply
      run: ./terragrunt_linux_amd64 apply -input=false
      working-directory: infrastructure
      
    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
